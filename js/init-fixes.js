// init-fixes.js - Script de inicializa√ß√£o com corre√ß√µes principais
console.log('üöÄ Iniciando corre√ß√µes principais do sistema...');

/**
 * CORRE√á√ÉO: Sistema de inicializa√ß√£o melhorado
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Aplicando corre√ß√µes de inicializa√ß√£o...');

    // CORRE√á√ÉO 1: Garantir que todos os m√≥dulos est√£o carregados
    const requiredModules = ['DateUtils', 'BrandUtils', 'PaymentValidation', 'Utils'];
    const missingModules = requiredModules.filter(module => !window[module]);
    
    if (missingModules.length > 0) {
        console.warn('‚ö†Ô∏è M√≥dulos em falta:', missingModules);
    } else {
        console.log('‚úÖ Todos os m√≥dulos utilit√°rios carregados');
    }

    // CORRE√á√ÉO 2: Inicializar sistema de notifica√ß√µes
    if (!window.showNotification) {
        console.warn('‚ö†Ô∏è Sistema de notifica√ß√µes n√£o encontrado, criando vers√£o b√°sica...');
        window.showNotification = function(message, type = 'info') {
            console.log(`[${type.toUpperCase()}] ${message}`);
            alert(message);
        };
    }

    // CORRE√á√ÉO 3: Verificar e corrigir elementos da interface
    fixInterfaceElements();

    // CORRE√á√ÉO 4: Aplicar corre√ß√µes espec√≠ficas de cada m√≥dulo
    setTimeout(() => {
        applyModuleSpecificFixes();
    }, 500);

    // CORRE√á√ÉO 5: Configurar handlers globais de erro
    setupGlobalErrorHandlers();

    // CORRE√á√ÉO 6: Verificar conectividade com Supabase
    checkSupabaseConnection();

    console.log('‚úÖ Corre√ß√µes de inicializa√ß√£o aplicadas!');
});

/**
 * CORRE√á√ÉO: Corrigir elementos da interface
 */
function fixInterfaceElements() {
    console.log('üîß Verificando elementos da interface...');

    // CORRE√á√ÉO: Garantir que bot√µes cr√≠ticos existem e s√£o vis√≠veis
    const criticalButtons = [
        'validate-comparison-btn',
        'export-btn',
        'add-caixa-btn',
        'close-caixa-btn'
    ];

    criticalButtons.forEach(buttonId => {
        const button = document.getElementById(buttonId);
        if (button) {
            // Remover classe hidden se existir
            button.classList.remove('hidden');
            
            // CORRE√á√ÉO: Bot√£o "Validar e Avan√ßar" sempre vis√≠vel quando h√° dados
            if (buttonId === 'validate-comparison-btn') {
                button.style.display = 'inline-block';
                console.log('‚úÖ Bot√£o "Validar e Avan√ßar" corrigido');
            }
        } else {
            console.warn(`‚ö†Ô∏è Bot√£o cr√≠tico n√£o encontrado: ${buttonId}`);
        }
    });

    // CORRE√á√ÉO: Verificar tabelas cr√≠ticas
    const criticalTables = [
        'comparison-table',
        'deliveries-table'
    ];

    criticalTables.forEach(tableId => {
        const table = document.getElementById(tableId);
        if (!table) {
            console.warn(`‚ö†Ô∏è Tabela cr√≠tica n√£o encontrada: ${tableId}`);
        } else {
            // Garantir que tbody existe
            if (!table.querySelector('tbody')) {
                const tbody = document.createElement('tbody');
                table.appendChild(tbody);
                console.log(`‚úÖ Tbody adicionado √† tabela ${tableId}`);
            }
        }
    });

    // CORRE√á√ÉO: Verificar contadores
    const counters = [
        'odoo-count',
        'backoffice-count',
        'inconsistency-count',
        'missing-count',
        'delivery-count'
    ];

    counters.forEach(counterId => {
        const counter = document.getElementById(counterId);
        if (counter && counter.textContent === '') {
            counter.textContent = '0';
        }
    });
}

/**
 * CORRE√á√ÉO: Aplicar corre√ß√µes espec√≠ficas de cada m√≥dulo
 */
function applyModuleSpecificFixes() {
    console.log('üîß Aplicando corre√ß√µes espec√≠ficas dos m√≥dulos...');

    // CORRE√á√ÉO: File Processor - Verifica√ß√£o de duplicados
    if (window.fileProcessor) {
        console.log('‚úÖ File Processor encontrado, aplicando corre√ß√µes...');
        
        // Sobrescrever fun√ß√£o de verifica√ß√£o de duplicados se necess√°rio
        const originalCheckDuplicates = window.fileProcessor.checkForDuplicates;
        if (originalCheckDuplicates) {
            window.fileProcessor.checkForDuplicates = function(newData, existingData) {
                console.log('üîç Verificando duplicados com corre√ß√£o...');
                
                if (!Array.isArray(newData) || !Array.isArray(existingData)) {
                    return { duplicates: [], unique: newData || [] };
                }

                const duplicates = [];
                const unique = [];

                newData.forEach(newRecord => {
                    const isDuplicate = existingData.some(existing => {
                        const plateMatch = window.Utils ? 
                            window.Utils.normalizeLicensePlate(newRecord.licensePlate) === 
                            window.Utils.normalizeLicensePlate(existing.licensePlate) :
                            newRecord.licensePlate === existing.licensePlate;
                        
                        const driverMatch = (newRecord.condutorEntrega || '').toLowerCase() === 
                                          (existing.condutorEntrega || '').toLowerCase();
                        
                        return plateMatch && driverMatch;
                    });

                    if (isDuplicate) {
                        duplicates.push(newRecord);
                    } else {
                        unique.push(newRecord);
                    }
                });

                console.log(`‚úÖ Verifica√ß√£o de duplicados: ${duplicates.length} duplicados, ${unique.length} √∫nicos`);
                return { duplicates, unique };
            };
        }
    }

    // CORRE√á√ÉO: Comparator - Normaliza√ß√£o de marcas
    if (window.comparator && window.BrandUtils) {
        console.log('‚úÖ Comparator encontrado, aplicando corre√ß√µes de marcas...');
        
        // Garantir que usa a fun√ß√£o corrigida de normaliza√ß√£o
        if (window.comparator.normalizeBrand !== window.BrandUtils.normalizeBrand) {
            window.comparator.normalizeBrand = window.BrandUtils.normalizeBrand;
            window.comparator.brandsMatch = window.BrandUtils.brandsMatch;
            console.log('‚úÖ Fun√ß√µes de marca atualizadas no comparator');
        }
    }

    // CORRE√á√ÉO: Validator - Sistema de IDs e inconsist√™ncias permanentes
    if (window.validator) {
        console.log('‚úÖ Validator encontrado, aplicando corre√ß√µes...');
        
        // Verificar se tem fun√ß√£o de valida√ß√£o de pagamentos
        if (!window.validator.validatePayment && window.PaymentValidation) {
            window.validator.validatePayment = window.PaymentValidation.validatePayment;
            console.log('‚úÖ Valida√ß√£o de pagamentos adicionada ao validator');
        }
    }

    // CORRE√á√ÉO: Dashboard - Formata√ß√£o de datas
    if (window.dashboard && window.DateUtils) {
        console.log('‚úÖ Dashboard encontrado, aplicando corre√ß√µes de data...');
        
        // Atualizar data atual se elemento existe
        const currentDateElement = document.getElementById('current-date');
        if (currentDateElement) {
            currentDateElement.textContent = window.DateUtils.getCurrentDateTime();
        }
    }
}

/**
 * CORRE√á√ÉO: Configurar handlers globais de erro
 */
function setupGlobalErrorHandlers() {
    console.log('üõ°Ô∏è Configurando handlers globais de erro...');

    // Handler para erros JavaScript n√£o capturados
    window.addEventListener('error', function(event) {
        console.error('‚ùå Erro JavaScript:', event.error);
        
        if (window.showNotification) {
            window.showNotification(
                'Erro inesperado detectado. Verifique o console para detalhes.',
                'error'
            );
        }
    });

    // Handler para promises rejeitadas n√£o capturadas
    window.addEventListener('unhandledrejection', function(event) {
        console.error('‚ùå Promise rejeitada:', event.reason);
        
        if (window.showNotification) {
            window.showNotification(
                'Erro de opera√ß√£o ass√≠ncrona. Verifique o console para detalhes.',
                'error'
            );
        }
    });

    // CORRE√á√ÉO: Handler espec√≠fico para erros do Supabase
    const originalSupabaseError = console.error;
    console.error = function(...args) {
        const message = args.join(' ');
        
        if (message.includes('supabase') || message.includes('postgresql')) {
            console.warn('üîç Erro relacionado ao Supabase detectado:', message);
            
            if (window.showNotification && message.includes('authentication')) {
                window.showNotification(
                    'Erro de autentica√ß√£o com base de dados. Verifique a configura√ß√£o.',
                    'error'
                );
            }
        }
        
        originalSupabaseError.apply(console, args);
    };
}

/**
 * CORRE√á√ÉO: Verificar conectividade com Supabase
 */
function checkSupabaseConnection() {
    console.log('üîó Verificando conectividade com Supabase...');

    if (typeof supabase !== 'undefined' && supabase) {
        // Teste simples de conectividade
        supabase
            .from('cash_records')
            .select('count', { count: 'exact', head: true })
            .then(response => {
                if (response.error) {
                    console.warn('‚ö†Ô∏è Erro ao conectar com Supabase:', response.error.message);
                    
                    if (window.showNotification) {
                        window.showNotification(
                            'Problema de conectividade com a base de dados',
                            'warning'
                        );
                    }
                } else {
                    console.log('‚úÖ Conectividade com Supabase confirmada');
                }
            })
            .catch(error => {
                console.error('‚ùå Erro na verifica√ß√£o do Supabase:', error);
            });
    } else {
        console.warn('‚ö†Ô∏è Cliente Supabase n√£o encontrado');
        
        if (window.showNotification) {
            window.showNotification(
                'Cliente de base de dados n√£o inicializado',
                'warning'
            );
        }
    }
}

/**
 * CORRE√á√ÉO: Fun√ß√£o para reinicializar sistema se necess√°rio
 */
function reinitializeSystem() {
    console.log('üîÑ Reinicializando sistema...');
    
    // Limpar caches se existirem
    if (window.localStorage) {
        const cacheKeys = Object.keys(localStorage).filter(key => 
            key.startsWith('caixa_') || key.startsWith('multipark_')
        );
        
        if (cacheKeys.length > 0) {
            console.log('üóëÔ∏è Limpando cache:', cacheKeys);
            cacheKeys.forEach(key => localStorage.removeItem(key));
        }
    }
    
    // Recarregar p√°gina se necess√°rio
    if (confirm('Reinicializar sistema? Isto ir√° recarregar a p√°gina.')) {
        window.location.reload();
    }
}

/**
 * CORRE√á√ÉO: Fun√ß√£o de diagn√≥stico do sistema
 */
function runSystemDiagnostics() {
    console.log('üîç Executando diagn√≥sticos do sistema...');
    
    const diagnostics = {
        timestamp: new Date().toISOString(),
        modules: {
            dateUtils: !!window.DateUtils,
            brandUtils: !!window.BrandUtils,
            paymentValidation: !!window.PaymentValidation,
            utils: !!window.Utils,
            fileProcessor: !!window.fileProcessor,
            comparator: !!window.comparator,
            validator: !!window.validator,
            dashboard: !!window.dashboard,
            exporter: !!window.exporter,
            supabase: !!window.supabase
        },
        interface: {
            validateButton: !!document.getElementById('validate-comparison-btn'),
            exportButton: !!document.getElementById('export-btn'),
            comparisonTable: !!document.getElementById('comparison-table'),
            deliveriesTable: !!document.getElementById('deliveries-table')
        },
        errors: []
    };
    
    // Verificar erros comuns
    if (!diagnostics.modules.supabase) {
        diagnostics.errors.push('Cliente Supabase n√£o inicializado');
    }
    
    if (!diagnostics.interface.validateButton) {
        diagnostics.errors.push('Bot√£o "Validar e Avan√ßar" n√£o encontrado');
    }
    
    console.table(diagnostics.modules);
    console.table(diagnostics.interface);
    
    if (diagnostics.errors.length > 0) {
        console.warn('‚ö†Ô∏è Problemas encontrados:', diagnostics.errors);
    } else {
        console.log('‚úÖ Todos os diagn√≥sticos passaram');
    }
    
    return diagnostics;
}

// CORRE√á√ÉO: Exportar fun√ß√µes para uso global
window.CaixaInitFixes = {
    reinitializeSystem,
    runSystemDiagnostics,
    fixInterfaceElements,
    applyModuleSpecificFixes,
    checkSupabaseConnection
};

// CORRE√á√ÉO: Auto-executar diagn√≥sticos em ambiente de desenvolvimento
if (window.location.hostname === 'localhost' || window.location.hostname.includes('127.0.0.1')) {
    setTimeout(() => {
        console.log('üß™ Ambiente de desenvolvimento detectado');
        console.log('üí° Fun√ß√µes dispon√≠veis:');
        console.log('  - window.CaixaInitFixes.runSystemDiagnostics()');
        console.log('  - window.CaixaInitFixes.reinitializeSystem()');
        console.log('  - window.CaixaDebugger.logState() (se utils carregado)');
    }, 2000);
}

console.log('üéØ Sistema de corre√ß√µes de inicializa√ß√£o carregado!');

